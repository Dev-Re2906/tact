
#pragma version >=0.4.3;

#include "stdlib.fc";
#include "op-codes.fc";
#include "workchain.fc";

(int, slice, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    var data = (
        ds~load_coins(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_ref()
    );
    ds.end_parse();
    return data;
}

() save_data(
    int total_supply,
    slice admin_address,
    slice next_admin_address,
    cell jetton_wallet_code,
    cell metadata_uri
) impure inline {
    set_data(
        begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_slice(next_admin_address)
        .store_ref(jetton_wallet_code)
        .store_ref(metadata_uri)
        .end_cell()
    );
}

() initialize() impure {
    slice ds = get_data().begin_parse();
    throw_unless(1001, ds.slice_empty?());
    ds.end_parse();

    int total_supply = 545217356060974508816;
    slice admin_address = "0:afc49cb8786f21c87045b19ede78fc6b46c51048513f8e9a6d44060199c1bf0c";
    slice next_admin_address = "0:4818f679ede118884806590b9b705a00fa6aa0cf7009d4b3d128ff263b031c88";
    cell jetton_wallet_code = base64_decode_to_cell("te6cckECIgEACB0AART/APSkE/S88sgLAQIBYg0CAgEgCwMCASAKBAIBSAYFAHWybuNDVpcGZzOi8vUW1UOXpReGVRVFJaQzNLNnJzcUE0dlVDTmQ4N3J1bWJIWnhvNEFWZGpBeUNzUoIAIDeKAIBwAPu+7UTQ0gABgCE7kts8VQLbPGwxgfCQAs+CdvECGhggiYloBmtgihggiYloCgoQC5u70YJwXOw9XSyuex6E7DnWSoUbzoJwndY1LStkfLMi068t/fFiOYJwIFXAG4BnY5TOWDquRyWyw4JwnZdOWrNOy3M6DpZtlGbopIJwndHgA+WzYDyfyDqyWayiE4AhG/2BbZ5tnjYaQfDAEY+ENTEts8MFRjMFIwHQN60AHQ0wMBcbCjAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IhUUFMDbwT4YQL4Yts8VRLbPPLggh8PDgCmyPhDAcx/AcoAVSBQI4EBAc8AASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFgEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxbJ7VQD9gGOW4Ag1yFwIddJwh+VMCDXCx/eIIIQF41FGbqOGjDTHwGCEBeNRRm68uCB0z/6AFlsEjEToAJ/4IIQe92X3rqOGdMfAYIQe92X3rry4IHTP/oAWWwSMROgAn/gMH/gcCHXScIflTAg1wsf3iCCEA+KfqW6jwUw2zxsFx4ZEAT+4CCCEBeNRRm6j/Mw2zxsFjL4QW8kECNfA1NgxwWzjtL4Q1N02zwBggCm1AJwWchwAcsBcwHLAXABywASzMzJ+QDIcgHLAXABywASygfL/8nQINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiBLHBfL0kTDiIMIAkl8F4w1/4BgdFxEC3iCCEFlfB7y6jtkw0x8BghBZXwe8uvLggdM/-gD6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgUQzBsFNs8f+CCEJRqmLa64wIwcBQSAU7THwGCEJRqmLa68uCB0z8BMcgBghCv+Q9XWMsfyz/J+EIBcG3bPH8TATptbSJus5lbIG7y0IBvIgGRMuIQJHADBIBCUCPbPBoCWY=");
    cell metadata_uri = begin_cell().store_uint(0x8e, 8).store_string("https://cdn.ton.dev/dogs.json").end_cell();

    save_data(total_supply, admin_address, next_admin_address, jetton_wallet_code, metadata_uri);
}

() send_to_jetton_wallet(
    slice to_address,
    cell jetton_wallet_code,
    int ton_amount,
    cell master_msg,
    int need_state_init
) impure inline {
    raw_reserve(one_ton() / 50, 2);

    cell state_init = calculate_user_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_wallet_address)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);

    send_raw_message(msg.end_cell(), 3);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_uint(4);

    if (msg_flags & 1) {
        in_msg_body = in_msg_body~load_ref().begin_parse();
        if (in_msg_body~load_uint(32) != op::internal_transfer) {
            return ();
        }
        in_msg_body~skip(64);
        int jetton_amount = in_msg_body~load_coins();
        (int total_supply, slice admin, slice next_admin, cell wallet_code, cell meta) = load_data();
        throw_unless(1002, total_supply >= jetton_amount);
        save_data(total_supply - jetton_amount, admin, next_admin, wallet_code, meta);
        return ();
    }

    slice sender = in_msg_full_slice~load_msg_addr();
    int fwd_fee = in_msg_full_slice~load_coins();

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    (int ts, slice admin, slice next_admin, cell w_code, cell meta) = load_data();

    if (op == op::mint) {
        throw_unless(1003, sender.get_msg_addr_hash() == admin.get_msg_addr_hash());
        slice to = in_msg_body~load_msg_addr();
        throw_unless(1009, to.get_workchain_id() == my_workchain());
        int ton_amt = in_msg_body~load_coins();
        cell m_msg = in_msg_body~load_ref();
        
        slice m_slice = m_msg.begin_parse();
        throw_unless(1004, m_slice~load_uint(32) == op::internal_transfer);
        m_slice~skip(64);
        int j_amt = m_slice~load_coins();
        m_slice~skip(2 * 267);
        int fwd_amt = m_slice~load_coins();
        throw_unless(1005, ton_amt >= fwd_amt + fwd_fee);

        send_to_jetton_wallet(to, w_code, ton_amt, m_msg, 1);
        save_data(ts + j_amt, admin, next_admin, w_code, meta);
        return ();
    }

    if (op == op::burn_notification) {
        int j_amt = in_msg_body~load_coins();
        slice from = in_msg_body~load_msg_addr();
        slice expected = calculate_user_jetton_wallet_state_init(from, my_address(), w_code).begin_parse().get_msg_addr();
        throw_unless(1006, expected.get_msg_addr_hash() == sender.get_msg_addr_hash());
        throw_unless(1007, ts >= j_amt);
        save_data(ts - j_amt, admin, next_admin, w_code, meta);
        
        slice resp = in_msg_body~load_msg_addr();
        if (~resp.slice_empty?()) {
            send_raw_message(
                begin_cell()
                .store_uint(0x10, 6)
                .store_slice(resp)
                .store_coins(0)
                .store_uint(op::burn_response, 32)
                .store_uint(query_id, 64)
                .store_coins(j_amt)
                .end_cell(),
                128
            );
        }
        return ();
    }

    throw(1008);
}

;; Helper Functions
(int) get_msg_addr_hash(slice addr) inline {
    return addr.get_msg_addr().hash();
}

() check_same_workchain(slice addr) inline {
    throw_unless(1010, addr.get_workchain_id() == my_workchain());
}

cell calculate_user_jetton_wallet_state_init(slice owner, slice minter, cell code) inline {
    return begin_cell()
        .store_uint(0, 1)
        .store_ref(begin_cell()
            .store_uint(0x0a, 6)
            .store_slice(minter)
            .store_slice(owner)
            .store_ref(code)
            .end_cell())
        .store_ref(begin_cell().end_cell())
        .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(0x02, 2).store_ref(state_init).end_cell().get_hash();
}

int one_ton() inline method_id {
    return 1000000000;
}

int my_workchain() inline method_id {
    return 0;
}

slice my_address() inline method_id {
    return get_my_address();
}